import type { NextPage } from "next"
import Head from "next/head"
// import Image from "next/image"
import { useGetGameListQuery, useLazyGetGameQuery } from "src/store/rawg.api"
import styles from "src/styles/pages/Home.module.scss"
import { useCallback, useEffect, useMemo, useState } from "react"
import { Game } from "src/types/Game.types"
import { GameCard } from "src/components/GameCard/GameCard"
import { Loading } from "src/components/Loading"
import { MainSlider } from "src/components/MainSlider/MainSlider"
import { GameVideo } from "src/components/GameVideo/GameVideo"
import { motion } from "framer-motion"

const duration = 12
const cycleArray = (array: any) => {
  const newArray = [...array]
  newArray.push(newArray.shift())
  return newArray
}

const Home: NextPage = () => {
  const { data, isLoading, error } = useGetGameListQuery({
    page: 2,
    pageSize: 4,
    genre: "",
  })
  const [trigger, results] = useLazyGetGameQuery()
  const [games, setGames] = useState<Game[] | null>(null)
  const [activeGame, setActiveGame] = useState<Game | null>(null)

  useEffect(() => {
    if (data && !isLoading) {
      setGames(data.results)
    }
  }, [data, isLoading])

  useEffect(() => {
    let interval: NodeJS.Timer
    interval = setInterval(() => {
      setGames((games) => cycleArray(games as Game[]) as Game[])
    }, duration * 1000)
    return () => clearInterval(interval)
  }, [games])

  useEffect(() => {
    games && trigger({ id: games[0].id })
  }, [games, trigger])

  useEffect(() => {
    results && setActiveGame(results.data)
  }, [results])

  if (error) return <div>Error</div>
  if (isLoading) return <Loading />

  return (
    <div className={styles.container}>
      <Head>
        <title>Game Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {games ? (
        <>
          <main className={styles.main}>
            <MainSlider data={games} duration={duration} />
          </main>

          {activeGame && (
            <footer className={styles.footer}>
              <GameVideo />
              <div className={styles.description}>
                <h2>{activeGame.name}</h2>
                {activeGame.description_raw.split("###").map((p, index) => (
                  <p key={index}>{p}</p>
                ))}
              </div>
            </footer>
          )}
        </>
      ) : null}
    </div>
  )
}

export default Home
